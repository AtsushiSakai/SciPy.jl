"""
scipy.optimize module

- [Optimization and Root Finding (scipy.optimize) Reference Guide](https://docs.scipy.org/doc/scipy/reference/optimize.html)


# Examples

You can optimize the Rosen function:

```julia-repl
julia> x0 = [1.3, 0.7, 0.8, 1.9, 1.2];

julia> res = SciPy.optimize.minimize(SciPy.optimize.rosen, x0, method="Nelder-Mead", tol=1e-6)
Dict{Any,Any} with 8 entries:
  "fun"           => 1.94206e-13
  "nit"           => 295
  "nfev"          => 494
  "status"        => 0
  "success"       => true
  "message"       => "Optimization terminated successfully."
  "x"             => [1.0, 1.0, 1.0, 1.0, 1.0]
  "final_simplex" => ([1.0 1.0 … 1.0 1.0; 1.0 1.0 … 1.0 1.0; … ; 1.0 1.0 … 1.0 1.0; 1.0 1.0 … 1.0 1.0], [1…

```
"""
module optimize

using PyCall
import PyCall: hasproperty # Base.hasproperty in Julia 1.2

import ..pyoptimize
import .._generate_docstring
import ..LazyHelp

const _ignore_funcs = ["optimize"]

# This list can be generated by print_scipy_api_list.py script
all_properties = ["BFGS", "Bounds", "HessianUpdateStrategy", "LbfgsInvHessProduct", "LinearConstraint", "NonlinearConstraint", "OptimizeResult", "OptimizeWarning", "RootResults", "SR1"
, "anderson", "approx_fprime", "basinhopping", "bisect", "bracket", "brent", "brenth", "brentq", "broyden1", "broyden2", "brute", "check_grad", "cobyla", "curve_fit", 
"diagbroyden", "differential_evolution", "dual_annealing", "excitingmixing", "fixed_point", "fmin", "fmin_bfgs", "fmin_cg", "fmin_cobyla", "fmin_l_bfgs_b", "fmin_ncg",
 "fmin_powell", "fmin_slsqp", "fmin_tnc", "fminbound", "fsolve", "golden", "lbfgsb", "least_squares", "leastsq", "line_search", "linear_sum_assignment", "linearmixing"
, "linesearch", "linprog", "linprog_verbose_callback", "lsq_linear", "minimize", "minimize_scalar", "minpack", "minpack2", "moduleTNC", "newton", "newton_krylov", "nnl
s", "nonlin", "optimize", "quadratic_assignment", "ridder", "root", "root_scalar", "rosen", "rosen_der", "rosen_hess", "rosen_hess_prod", "shgo", "show_options", "slsq
p", "tnc", "toms748", "zeros"]

for f in all_properties
    f in _ignore_funcs && continue

    sf = Symbol(f)
    @eval @doc LazyHelp(pyoptimize, $f) $sf(args...; kws...) = pycall(pyoptimize.$f, PyAny, args...; kws...)
end

function __init__()
    copy!(pyoptimize, pyimport_conda("scipy.optimize", "scipy"))
end


end # module
