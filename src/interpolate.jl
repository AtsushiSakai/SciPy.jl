"""
scipy.interpolate module

- [Interpolation (scipy.interpolate) Reference Guide](https://docs.scipy.org/doc/scipy/reference/interpolate.html)


# Examples

You can interpolate 1D data:

```julia-repl
julia> x = collect(0:10);
julia> y = exp.(-x/3.0);
julia> f = SciPy.interpolate.interp1d(x, y);
julia> f(0.5)
0-dimensional Array{Float64,0}:
0.8582656552868946

```
"""
module interpolate

using PyCall
import PyCall: hasproperty # Base.hasproperty in Julia 1.2

import ..pyinterpolate
import .._generate_docstring
import ..LazyHelp

const _ignore_funcs = ["interpolate"]

# This list can be generated by print_scipy_api_list.py script
all_properties = ["Akima1DInterpolator", "BPoly", "BSpline", "BarycentricInterpolator", "BivariateSpline", "CloughTocher2DInterpolator", "CubicHermiteSpline", "CubicSpline", "InterpolatedUnivaria
teSpline", "KroghInterpolator", "LSQBivariateSpline", "LSQSphereBivariateSpline", "LSQUnivariateSpline", "LinearNDInterpolator", "NdPPoly", "NearestNDInterpolator", "PPoly", "Pch
ipInterpolator", "Rbf", "RectBivariateSpline", "RectSphereBivariateSpline", "RegularGridInterpolator", "SmoothBivariateSpline", "SmoothSphereBivariateSpline", "UnivariateSpline",
 "approximate_taylor_polynomial", "barycentric_interpolate", "bisplev", "bisplrep", "dfitpack", "fitpack", "fitpack2", "griddata", "insert", "interp1d", "interp2d", "interpn", "i
nterpnd", "interpolate", "krogh_interpolate", "lagrange", "make_interp_spline", "make_lsq_spline", "ndgriddata", "pade", "pchip_interpolate", "polyint", "rbf", "spalde", "splanti
der", "splder", "splev", "splint", "splprep", "splrep", "sproot"]

for f in all_properties
    f in _ignore_funcs && continue

    sf = Symbol(f)
    @eval @doc LazyHelp(pyinterpolate, $f) $sf(args...; kws...) = pycall(pyinterpolate.$f, PyAny, args...; kws...)
end

function __init__()
    copy!(pyinterpolate, pyimport_conda("scipy.interpolate", "scipy"))
end


end # module
