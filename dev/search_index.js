var documenterSearchIndex = {"docs":
[{"location":"examples/cluster/#scipy.cluster","page":"cluster","title":"scipy.cluster","text":"","category":"section"},{"location":"examples/cluster/","page":"cluster","title":"cluster","text":"scipy.cluster module","category":"page"},{"location":"examples/cluster/","page":"cluster","title":"cluster","text":"Clustering package (scipy.cluster) Reference Guide","category":"page"},{"location":"examples/cluster/#vq.kmeans","page":"cluster","title":"vq.kmeans","text":"","category":"section"},{"location":"examples/cluster/","page":"cluster","title":"cluster","text":"scipy.cluster.vq.kmeans Reference Guide","category":"page"},{"location":"examples/cluster/","page":"cluster","title":"cluster","text":"using SciPy # hide\nusing PyPlot # hide\nusing Distributions # hide\nclose(\"all\") # hide\nn_points = 50\npoints1=[rand(Normal(0.0, 0.2), n_points) rand(Normal(0.0, 1.0), n_points)]\npoints2=[rand(Normal(3.0, 0.5), n_points) rand(Normal(2.0, 0.5), n_points)]\npoints=[points1; points2]\nwhitened = cluster.vq.whiten(points)\ncodebook, distortion = cluster.vq.kmeans(whitened, 2)\nplot(whitened[:, 1], whitened[:, 2], \".k\")\nplot(codebook[:, 1], codebook[:, 2], \"or\")\naxis(\"equal\")\nsavefig(\"cluster_vq_kmeans.png\") # hide","category":"page"},{"location":"examples/cluster/","page":"cluster","title":"cluster","text":"(Image: )","category":"page"},{"location":"api_references/#API-References","page":"API References","title":"API References","text":"","category":"section"},{"location":"api_references/","page":"API References","title":"API References","text":"Modules = [SciPy]","category":"page"},{"location":"api_references/#SciPy.SciPy","page":"API References","title":"SciPy.SciPy","text":"A Julia interface module for SciPy\n\nGitHub repository: AtsushiSakai/SciPy.jl: Julia interface for SciPy\nStable Doc\nDev Doc\n\n\n\n\n\n","category":"module"},{"location":"api_references/#SciPy.cluster","page":"API References","title":"SciPy.cluster","text":"scipy.cluster module\n\nClustering package (scipy.cluster) Reference Guide\n\nExamples\n\nYou can do k-means clustering using this module:\n\njulia> features  = [[ 1.9  2.3];\n                    [ 1.5 2.5];\n                    [ 0.8 0.6];\n                    [ 0.4 1.8];\n                    [ 0.1 0.1];\n                    [ 0.2 1.8];\n                    [ 2.0 0.5];\n                    [ 0.3 1.5];\n                    [ 1.0 1.0]]\n9×2 Array{Float64,2}:\n 1.9  2.3\n 1.5  2.5\n 0.8  0.6\n 0.4  1.8\n 0.1  0.1\n 0.2  1.8\n 2.0  0.5\n 0.3  1.5\n 1.0  1.0\n\njulia> whitened = SciPy.cluster.vq.whiten(features)\n9×2 Array{Float64,2}:\n 2.7396    2.91001\n 2.16284   3.16306\n 1.15351   0.759134\n 0.576757  2.2774\n 0.144189  0.126522\n 0.288379  2.2774\n 2.88379   0.632612\n 0.432568  1.89784\n 1.44189   1.26522\n\njulia> SciPy.cluster.vq.kmeans(whitened, [whitened[1,:] whitened[3,:]] )\n([1.1174670798453024 1.8345740800894272; 2.8837860125040065 0.6326117517549749], 1.073399\n3090584457)\n\n\n\n\n\n\n","category":"constant"},{"location":"api_references/#SciPy.constants","page":"API References","title":"SciPy.constants","text":"scipy.constants module\n\nConstants (scipy.constants) Reference Guide\n\nExamples\n\nYou can access each constants:\n\njulia> SciPy.constants.golden\n1.618033988749895\n\njulia> SciPy.constants.physical_constants[\"electron mass\"] \n(9.10938356e-31, \"kg\", 1.1e-38)\n\njulia> SciPy.constants.convert_temperature([-40, 40.0], \"Celsius\", \"Kelvin\") \n\n2-element Array{Float64,1}:\n 233.14999999999998\n 313.15\n\n\n\n\n\n\n","category":"constant"},{"location":"api_references/#SciPy.fft","page":"API References","title":"SciPy.fft","text":"scipy.fft module\n\nDiscrete Fourier transforms (scipy.fft) Reference Guide\n\nExamples\n\nYou can use FFT (Fast Fourier Transform):\n\n\njulia> SciPy.fft.fft(exp.(π/8 * collect(1:8)))\n8-element Array{Complex{Float64},1}:\n   68.17385416403044 - 0.0im\n   1.408601300061675 + 31.248171041435185im\n -10.268363617931092 + 15.207165888808841im\n -12.695027025520982 + 6.493878653648949im\n -13.216494113330363 - 0.0im\n -12.695027025520982 - 6.493878653648949im\n -10.268363617931092 - 15.207165888808841im\n   1.408601300061675 - 31.248171041435185im\n\n\n\n\n\n\n","category":"constant"},{"location":"api_references/#SciPy.integrate","page":"API References","title":"SciPy.integrate","text":"scipy.integrate module\n\nIntegration and ODEs (scipy.integrate) Reference Guide\n\nExamples\n\nYou can compute a definite integral:\n\njulia> f(x) = x^2\nf (generic function with 1 method)\n\njulia> SciPy.integrate.quad(f, 0, 4)\n(21.333333333333336, 2.368475785867001e-13)\n\n\n\n\n\n\n","category":"constant"},{"location":"api_references/#SciPy.interpolate","page":"API References","title":"SciPy.interpolate","text":"scipy.interpolate module\n\nInterpolation (scipy.interpolate) Reference Guide\n\nExamples\n\nYou can interpolate 1D data:\n\njulia> x = collect(0:10);\njulia> y = exp.(-x/3.0);\njulia> f = SciPy.interpolate.interp1d(x, y);\njulia> f(0.5)\n0-dimensional Array{Float64,0}:\n0.8582656552868946\n\n\n\n\n\n\n","category":"constant"},{"location":"api_references/#SciPy.io","page":"API References","title":"SciPy.io","text":"scipy.io module\n\nInput and output (scipy.io) Reference Guide\n\nExamples\n\nYou can save a MATLAB-style .mat file:\n\njulia> mdic = Dict([(\"a\", 100), (\"label\", \"experiment\")])\nDict{String,Any} with 2 entries:\n  \"label\" => \"experiment\"\n  \"a\"     => 100\n\njulia> SciPy.io.savemat(\"sample_data.mat\", mdic)\n\n\n\n\n\n","category":"constant"},{"location":"api_references/#SciPy.linalg","page":"API References","title":"SciPy.linalg","text":"scipy.linalg module\n\nLinear algebra (scipy.linalg) Reference Guide\n\nExamples\n\nYou can compute the matrix exponential using Pade approximation:\n\njulia> SciPy.linalg.expm(zeros((2,2)))\n2×2 Array{Float64,2}:\n 1.0  0.0\n 0.0  1.0\n\n\n\n\n\n","category":"constant"},{"location":"api_references/#SciPy.ndimage","page":"API References","title":"SciPy.ndimage","text":"scipy.ndimage module\n\nMulti-dimensional image processing (scipy.ndimage) Reference Guide\n\nExamples\n\nYou can compute a multidimensional convolution:\n\njulia> k = [[1 1 1];[1 1 0];[1 0 0]]\n3×3 Array{Int64,2}:\n 1  1  1\n 1  1  0\n 1  0  0\n\njulia> a = [[1 2 0 0];\n            [5 3 0 4];\n            [0 0 0 7];\n            [9 3 0 0]]\n4×4 Array{Int64,2}:\n 1  2  0  0\n 5  3  0  4\n 0  0  0  7\n 9  3  0  0\n\njulia> SciPy.ndimage.convolve(a, k, mode=\"constant\", cval=0.0)\n4×4 Array{Int64,2}:\n 11  10   7   4\n 10   3  11  11\n 15  12  14   7\n 12   3   7   0\n\n\n\n\n\n","category":"constant"},{"location":"api_references/#SciPy.odr","page":"API References","title":"SciPy.odr","text":"scipy.odr module\n\nOrthogonal distance regression (scipy.odr) Reference Guide\n\nExamples\n\nYou can calculate orthogonal distance regression with an exponential model:\n\njulia> x = collect(0.0:5.0);\n\njulia> y = -10.0 .+ exp.(0.5*x);\n\njulia> data = SciPy.odr.Data(x, y)\nPyObject <scipy.odr.odrpack.Data object at 0x7fe5fda4ccc0>\n\njulia> data = SciPy.odr.Data(x, y);\n\njulia> odr_obj = SciPy.odr.ODR(data, SciPy.odr.exponential);\n\njulia> output = odr_obj.run();\n\njulia> println(output.beta)\n[-10.0, 0.5]\n\n\n\n\n\n","category":"constant"},{"location":"api_references/#SciPy.optimize","page":"API References","title":"SciPy.optimize","text":"scipy.optimize module\n\nOptimization and Root Finding (scipy.optimize) Reference Guide\n\nExamples\n\nYou can optimize the Rosen function:\n\njulia> x0 = [1.3, 0.7, 0.8, 1.9, 1.2];\n\njulia> res = SciPy.optimize.minimize(SciPy.optimize.rosen, x0, method=\"Nelder-Mead\", tol=1e-6)\nDict{Any,Any} with 8 entries:\n  \"fun\"           => 1.94206e-13\n  \"nit\"           => 295\n  \"nfev\"          => 494\n  \"status\"        => 0\n  \"success\"       => true\n  \"message\"       => \"Optimization terminated successfully.\"\n  \"x\"             => [1.0, 1.0, 1.0, 1.0, 1.0]\n  \"final_simplex\" => ([1.0 1.0 … 1.0 1.0; 1.0 1.0 … 1.0 1.0; … ; 1.0 1.0 … 1.0 1.0; 1.0 1.0 … 1.0 1.0], [1…\n\n\n\n\n\n\n","category":"constant"},{"location":"api_references/#SciPy.signal","page":"API References","title":"SciPy.signal","text":"scipy.signal module\n\nSignal processing (scipy.signal) Reference Guide\n\nExamples\n\nYou can compute the Kaiser parameter beta, given the attenuation a:\n\njulia> SciPy.signal.kaiser_beta(65)\n6.20426\n\n\n\n\n\n\n","category":"constant"},{"location":"api_references/#SciPy.sparse","page":"API References","title":"SciPy.sparse","text":"scipy.sparse module\n\nSparse matrices (scipy.sparse) Reference Guide\n\nExamples\n\nYou can do sparse matrix calculation:\n\njulia> A = SciPy.sparse.csc_matrix([[1.0 0.0];\n                                   [1.0 2.0]]);\n\njulia> Ainv = SciPy.sparse.linalg.inv(A);\n\njulia> A.dot(Ainv).todense()\n2×2 Array{Float64,2}:\n 1.0  0.0\n 0.0  1.0\n\n\n\n\n\n\n","category":"constant"},{"location":"api_references/#SciPy.spatial","page":"API References","title":"SciPy.spatial","text":"scipy.spatial module\n\nSpatial algorithms and data structures (scipy.spatial) Reference Guide\n\nExamples\n\nYou can calculate several rotation representations:\n\njulia> R = SciPy.spatial.transform.Rotation;\n\njulia> r = R.from_quat([0, 0, sin(π/4.0), cos(π/4)]);\n\njulia> r.as_matrix()\n3×3 Array{Float64,2}:\n 2.22045e-16  -1.0          0.0\n 1.0           2.22045e-16  0.0\n 0.0           0.0          1.0\n\njulia> r.as_rotvec()\n3-element Array{Float64,1}:\n 0.0\n 0.0\n 1.5707963267948963\n\njulia> r.as_euler(\"zyx\", degrees=true)\n3-element Array{Float64,1}:\n 90.0\n  0.0\n  0.0\n\n\n\n\n\n","category":"constant"},{"location":"api_references/#SciPy.special","page":"API References","title":"SciPy.special","text":"scipy.special module\n\nSpecial functions (scipy.special) Reference Guide\n\n\n\n\n\n","category":"constant"},{"location":"api_references/#SciPy.stats","page":"API References","title":"SciPy.stats","text":"scipy.stats module\n\nStatistical functions (scipy.stats) Reference Guide\n\nExamples\n\nYou can calculate Pearson correlation coefficient and p-value:\n\njulia> a = [0, 0, 0, 1, 1, 1, 1];\n\njulia> b = collect(0:6);\n\njulia> SciPy.stats.pearsonr(a, b)\n(0.8660254037844386, 0.011724811003954649)\n\n\n\n\n\n","category":"constant"},{"location":"api_references/#SciPy.__init__-Tuple{}","page":"API References","title":"SciPy.__init__","text":"Module initialization function\n\n\n\n\n\n","category":"method"},{"location":"api_references/#SciPy.print_configulations-Tuple{}","page":"API References","title":"SciPy.print_configulations","text":"Print configulations:\n\nJulia version\nPython version\nPython path\nscipy version\n\n\n\n\n\n","category":"method"},{"location":"examples/signal/#scipy.signal","page":"signal","title":"scipy.signal","text":"","category":"section"},{"location":"examples/signal/","page":"signal","title":"signal","text":"scipy.signal module","category":"page"},{"location":"examples/signal/","page":"signal","title":"signal","text":"Signal processing (scipy.signal) Reference Guide","category":"page"},{"location":"examples/signal/#convolve","page":"signal","title":"convolve","text":"","category":"section"},{"location":"examples/signal/","page":"signal","title":"signal","text":"scipy.signal.convolve — SciPy Reference Guide","category":"page"},{"location":"examples/signal/","page":"signal","title":"signal","text":"using SciPy # hide\nusing PyPlot # hide\nsig = repeat([0., 1., 0.], inner=100)\nwin = signal.hann(50)\nfiltered = signal.convolve(sig, win, mode=\"same\") / sum(win)\nfig, (ax_orig, ax_win, ax_filt) = plt.subplots(3, 1, sharex=true)\nax_orig.plot(sig)\nax_orig.set_title(\"Original pulse\")\nax_orig.margins(0, 0.1)\nax_win.plot(win)\nax_win.set_title(\"Filter impulse response\")\nax_win.margins(0, 0.1)\nax_filt.plot(filtered)\nax_filt.set_title(\"Filtered signal\")\nax_filt.margins(0, 0.1)\nfig.tight_layout()\nsavefig(\"convolve.png\") # hide","category":"page"},{"location":"examples/signal/","page":"signal","title":"signal","text":"(Image: )","category":"page"},{"location":"examples/sparse/#scipy.sparse","page":"sparse","title":"scipy.sparse","text":"","category":"section"},{"location":"examples/sparse/","page":"sparse","title":"sparse","text":"scipy.sparse module","category":"page"},{"location":"examples/sparse/","page":"sparse","title":"sparse","text":"Sparse matrices (scipy.sparse) Reference Guide","category":"page"},{"location":"examples/sparse/#csr_matrix","page":"sparse","title":"csr_matrix","text":"","category":"section"},{"location":"examples/sparse/","page":"sparse","title":"sparse","text":"scipy.sparse.csr_matrix Reference Guide","category":"page"},{"location":"examples/sparse/","page":"sparse","title":"sparse","text":"A = sparse.csr_matrix([1 2 0; 0 0 3; 4 0 5])\nv = [1, 0, -1]\nprinln(A.dot(v))","category":"page"},{"location":"examples/linalg/#scipy.linalg","page":"linalg","title":"scipy.linalg","text":"","category":"section"},{"location":"examples/linalg/","page":"linalg","title":"linalg","text":"scipy.linalg module","category":"page"},{"location":"examples/linalg/","page":"linalg","title":"linalg","text":"Linear algebra (scipy.linalg) Reference Guide","category":"page"},{"location":"examples/linalg/#polar","page":"linalg","title":"polar","text":"","category":"section"},{"location":"examples/linalg/","page":"linalg","title":"linalg","text":"scipy.linalg.polar Reference Guide","category":"page"},{"location":"examples/linalg/","page":"linalg","title":"linalg","text":"using SciPy # hide\na = [1.0 -1;\n     2.0 4.0]\nu, p = linalg.polar(a)\nprintln(\"u=$u\")\nprintln(\"p=$p\")","category":"page"},{"location":"examples/ndimage/#scipy.ndimage","page":"ndimage","title":"scipy.ndimage","text":"","category":"section"},{"location":"examples/ndimage/","page":"ndimage","title":"ndimage","text":"scipy.ndimage module","category":"page"},{"location":"examples/ndimage/","page":"ndimage","title":"ndimage","text":"Multi-dimensional image processing (scipy.ndimage) Reference Guide","category":"page"},{"location":"examples/ndimage/#convolve","page":"ndimage","title":"convolve","text":"","category":"section"},{"location":"examples/ndimage/","page":"ndimage","title":"ndimage","text":"scipy.ndimage.convolve Reference Guide","category":"page"},{"location":"examples/ndimage/","page":"ndimage","title":"ndimage","text":"using SciPy # hide\n\nc = [2 0 1;\n     1 0 0;\n     0 0 0]\nk = [0 1 0;\n     0 1 0;\n     0 1 0;\n     0 1 0;\n     0 1 0]\nndimage.convolve(c, k, mode=\"nearest\")","category":"page"},{"location":"examples/fft/#scipy.fft","page":"fft","title":"scipy.fft","text":"","category":"section"},{"location":"examples/fft/","page":"fft","title":"fft","text":"scipy.fft module","category":"page"},{"location":"examples/fft/","page":"fft","title":"fft","text":"Discrete Fourier transforms (scipy.fft) Reference Guide","category":"page"},{"location":"examples/fft/#scipy.fft.fft","page":"fft","title":"scipy.fft.fft","text":"","category":"section"},{"location":"examples/fft/","page":"fft","title":"fft","text":"scipy.fft.fft Reference Guide","category":"page"},{"location":"examples/fft/","page":"fft","title":"fft","text":"using SciPy # hide\nusing PyPlot # hide\nclose(\"all\") # hide\nt = collect(0:256)\nsp = fft.fftshift(fft.fft(sin.(t)))\nfreq = fft.fftshift(fft.fftfreq(size(t)[end]))\nplot(freq, real(sp), freq, imag(sp))\nsavefig(\"fft.png\") # hide","category":"page"},{"location":"examples/fft/","page":"fft","title":"fft","text":"(Image: )","category":"page"},{"location":"examples/constants/#scipy.constants","page":"constants","title":"scipy.constants","text":"","category":"section"},{"location":"examples/constants/","page":"constants","title":"constants","text":"scipy.constants module","category":"page"},{"location":"examples/constants/","page":"constants","title":"constants","text":"Constants (scipy.constants) Reference Guide","category":"page"},{"location":"examples/constants/#scipy.constants.physical_constants","page":"constants","title":"scipy.constants.physical_constants","text":"","category":"section"},{"location":"examples/constants/","page":"constants","title":"constants","text":"Constants (scipy.constants) Reference Guide","category":"page"},{"location":"examples/constants/","page":"constants","title":"constants","text":"using SciPy # hide\nprintln(SciPy.constants.physical_constants[\"electron mass\"])","category":"page"},{"location":"examples/constants/#scipy.constants.convert_temperature","page":"constants","title":"scipy.constants.convert_temperature","text":"","category":"section"},{"location":"examples/constants/","page":"constants","title":"constants","text":"scipy.constants.convert_temperature Reference Guide","category":"page"},{"location":"examples/constants/","page":"constants","title":"constants","text":"using SciPy # hide\nprintln(SciPy.constants.convert_temperature([-40, 40.0], \"Celsius\", \"Kelvin\"))","category":"page"},{"location":"examples/io/#scipy.io","page":"io","title":"scipy.io","text":"","category":"section"},{"location":"examples/io/","page":"io","title":"io","text":"scipy.io module","category":"page"},{"location":"examples/io/","page":"io","title":"io","text":"Input and output (scipy.io) Reference Guide","category":"page"},{"location":"examples/io/#scipy.io.hb*write,-scipy.ip.hb*read","page":"io","title":"scipy.io.hbwrite, scipy.ip.hbread","text":"","category":"section"},{"location":"examples/io/","page":"io","title":"io","text":"scipy.io.hb_read Reference Guide\nscipy.io.hb_write Reference Guide","category":"page"},{"location":"examples/io/","page":"io","title":"io","text":"using SciPy # hide\ndata = sparse.csr_matrix(sparse.eye(3))  # create a sparse matrix\nio.hb_write(\"data.hb\", data)  # write a hb file\nio.hb_read(\"data.hb\").todense()  # read a hb file","category":"page"},{"location":"examples/optimize/#scipy.optimize","page":"optimize","title":"scipy.optimize","text":"","category":"section"},{"location":"examples/optimize/","page":"optimize","title":"optimize","text":"scipy.optimize module","category":"page"},{"location":"examples/optimize/","page":"optimize","title":"optimize","text":"Optimization and Root Finding (scipy.optimize) Reference Guide","category":"page"},{"location":"examples/optimize/#linprog","page":"optimize","title":"linprog","text":"","category":"section"},{"location":"examples/optimize/","page":"optimize","title":"optimize","text":"scipy.optimize.linprog Reference Guide","category":"page"},{"location":"examples/optimize/","page":"optimize","title":"optimize","text":"using SciPy # hide\nA = [-3 1; \n      1 2]\nb = [6, 4]\nc = [-1, 4]\nx0_bounds = (nothing, nothing)\nx1_bounds = (-3, nothing)\nres = optimize.linprog(c, A_ub=A, b_ub=b, bounds=[x0_bounds, x1_bounds])","category":"page"},{"location":"examples/spatial/#scipy.spatial","page":"spatial","title":"scipy.spatial","text":"","category":"section"},{"location":"examples/spatial/","page":"spatial","title":"spatial","text":"scipy.spatial module","category":"page"},{"location":"examples/spatial/","page":"spatial","title":"spatial","text":"Spatial algorithms and data structures (scipy.spatial) Reference Guide","category":"page"},{"location":"examples/spatial/#KDTree.query*ball*tree","page":"spatial","title":"KDTree.queryballtree","text":"","category":"section"},{"location":"examples/spatial/","page":"spatial","title":"spatial","text":"scipy.spatial.cKDTree.query_ball_tree Reference Guide","category":"page"},{"location":"examples/spatial/","page":"spatial","title":"spatial","text":"using SciPy # hide\nusing PyPlot # hide\nusing Distributions # hide\nclose(\"all\") # hide\n\npoints1 = rand(15, 2)\npoints2 = rand(15, 2)\nfigure(figsize=(6, 6))\nplot(points1[:, 1], points1[:, 2], \"xk\", markersize=14)\nplot(points2[:, 1], points2[:, 2], \"og\", markersize=14)\nkd_tree1 = spatial.KDTree(points1)\nkd_tree2 = spatial.KDTree(points2)\nindexes = kd_tree1.query_ball_tree(kd_tree2, r=0.2)\nfor i in 1:length(indexes)\n    for j in indexes[i]\n        plot([points1[i, 1], points2[j+1, 1]], [points1[i, 2], points2[j+1, 2]], \"-r\")\n    end\nend\nsavefig(\"KDTree_query_ball_tree.png\") # hide","category":"page"},{"location":"examples/spatial/","page":"spatial","title":"spatial","text":"(Image: )","category":"page"},{"location":"examples/stats/#scipy.stats","page":"stats","title":"scipy.stats","text":"","category":"section"},{"location":"examples/stats/","page":"stats","title":"stats","text":"scipy.stats module","category":"page"},{"location":"examples/stats/","page":"stats","title":"stats","text":"Statistical functions (scipy.stats) Reference Guide","category":"page"},{"location":"examples/stats/#describe","page":"stats","title":"describe","text":"","category":"section"},{"location":"examples/stats/","page":"stats","title":"stats","text":"scipy.stats.describe Reference Guide","category":"page"},{"location":"examples/stats/","page":"stats","title":"stats","text":"using SciPy # hide\n\na = collect(0:10)\nprintln(stats.describe(a))\n\nb = [1 2; 3 4]\nprintln(stats.describe(b))","category":"page"},{"location":"examples/interpolate/#scipy.interpolate","page":"interpolate","title":"scipy.interpolate","text":"","category":"section"},{"location":"examples/interpolate/","page":"interpolate","title":"interpolate","text":"scipy.interpolate module","category":"page"},{"location":"examples/interpolate/","page":"interpolate","title":"interpolate","text":"Interpolation (scipy.interpolate) Reference Guide","category":"page"},{"location":"examples/interpolate/#scipy.interpolate.interp1d","page":"interpolate","title":"scipy.interpolate.interp1d","text":"","category":"section"},{"location":"examples/interpolate/","page":"interpolate","title":"interpolate","text":"scipy.interpolate.interp1d Reference Guide","category":"page"},{"location":"examples/interpolate/","page":"interpolate","title":"interpolate","text":"using SciPy # hide\nusing PyPlot # hide\nusing Distributions # hide\nclose(\"all\") # hide\nx = collect(0.0:10.0)\ny = exp.(-x/3.0)\nplot(x, y, \"o\")\nfor kind in [\"linear\", \"nearest\", \"zero\", \"slinear\", \"quadratic\", \"cubic\", \"previous\", \"next\"]\n    f = interpolate.interp1d(x, y, kind=kind)\n    xnew = collect(0:0.1:10)\n    ynew = f(xnew)\n    plot(xnew, ynew, \"-\", label=kind)\nend\nlegend()\nsavefig(\"interp1d.png\") # hide","category":"page"},{"location":"examples/interpolate/","page":"interpolate","title":"interpolate","text":"(Image: )","category":"page"},{"location":"examples/special/#scipy.spetial","page":"scipy.spetial","title":"scipy.spetial","text":"","category":"section"},{"location":"examples/special/","page":"scipy.spetial","title":"scipy.spetial","text":"scipy.spetial module","category":"page"},{"location":"examples/special/","page":"scipy.spetial","title":"scipy.spetial","text":"Special functions (scipy.special) Reference Guide","category":"page"},{"location":"examples/odr/#scipy.odr","page":"odr","title":"scipy.odr","text":"","category":"section"},{"location":"examples/odr/","page":"odr","title":"odr","text":"scipy.odr module","category":"page"},{"location":"examples/odr/","page":"odr","title":"odr","text":"Orthogonal distance regression (scipy.odr) Reference Guide","category":"page"},{"location":"examples/odr/#polynomial","page":"odr","title":"polynomial","text":"","category":"section"},{"location":"examples/odr/","page":"odr","title":"odr","text":"scipy.odr.polynomial Reference Guide","category":"page"},{"location":"examples/odr/","page":"odr","title":"odr","text":"using SciPy # hide\nusing PyPlot # hide\nusing Distributions # hide\nclose(\"all\") # hide\n\nx = collect(0.0:0.1:5.0)\ny = sin.(x)\npoly_model = odr.polynomial(3)  # using third order polynomial model\ndata = odr.Data(x, y)\nodr_obj = odr.ODR(data, poly_model)\noutput = odr_obj.run()  # running ODR fitting\na = output.beta\ny_odr = a[4].*x.^3+a[3].*x.^2+a[2].*x.^1 .+ a[1]\nplt.plot(x, y, label=\"input data\")\nplt.plot(x, y_odr, label=\"polynomial ODR\")#\nplt.legend()\nsavefig(\"ODR.png\") # hide","category":"page"},{"location":"examples/odr/","page":"odr","title":"odr","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SciPy","category":"page"},{"location":"#SciPy.jl","page":"Home","title":"SciPy.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Build Status) (Image: Stable) (Image: Dev)","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Julia interface for SciPy using PyCall.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can use many useful scientific functions of SciPy from Julia codes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can know which kind of functions are available in the SciPy Reference Guide.","category":"page"},{"location":"#Requirements","page":"Home","title":"Requirements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia 1.4.x or higher.","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is tested against, and being developed for, Julia 1.4 and above on Linux, macOS, and Windows.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can install this package with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg;Pkg.add(\"SciPy\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"and then just import it with using SciPy.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you want use latest development code, clone this repo.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then, command this in Pkg mode:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pkg> dev /path/to/module","category":"page"},{"location":"#How-to-use","page":"Home","title":"How to use","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can check \"Examples\" sections for each scipy modules.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Other utility functionalities are available as belows:","category":"page"},{"location":"#Accessing-docstring","page":"Home","title":"Accessing docstring","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can access docstring of a SciPy function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"help?> SciPy.io.savemat\n\n    Save a dictionary of names and arrays into a MATLAB-style .mat file.\n    ...","category":"page"},{"location":"#Print-configulations","page":"Home","title":"Print configulations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can check dependency configulations of SciPy using print_configulations().","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> print_configulations();\n==== SciPy.jl configulations ====\n-- Julia settings --\nJulia Version 1.4.2\nCommit 44fa15b150* (2020-05-23 18:35 UTC)\nPlatform Info:\n  OS: macOS (x86_64-apple-darwin18.7.0)\n  CPU: Intel(R) Core(TM) i7-7660U CPU @ 2.50GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)\nEnvironment:\n  JULIA_NUM_THREADS = 4\n  JULIA_EDITOR = vim\n-- PyCall.jl settings --\nPyCall.pyversion = v\"3.7.1\"\nPyCall.libpython = \"/Users/user/.julia/conda/3/lib/libpython3.7m.dylib\"\nPyCall.pyprogramname = \"/Users/user/.julia/conda/3/bin/python\"\nPyCall.conda = true\n-- SciPy settings --\nscipy.__version__ = \"1.4.1\"\nscipy.version.full_version = \"1.4.1\"\nscipy.version.git_revision = \"Unknown\"","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
